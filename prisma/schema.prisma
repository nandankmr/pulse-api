// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model - Stores user credentials, profile info, and verification status
model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  avatarUrl      String?
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  messagesSent   Message[]  @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  groupMemberships GroupMember[]
  groupInvitationsSent GroupInvitation[] @relation("GroupInvitationInviter")
  directConversationsInitiated DirectConversation[] @relation("DirectConversationUserA")
  directConversationsReceived DirectConversation[] @relation("DirectConversationUserB")
  verificationTokens VerificationToken[]
  deviceSessions DeviceSession[]
  pushTokens      PushToken[]
  media          Media[]    @relation("MediaUploader")
  messageReceipts MessageReceipt[]
  systemMessagesActed    Message[]  @relation("SystemActor")
  systemMessagesTargeted Message[]  @relation("SystemTarget")

  @@map("users")
}

// Message Model - Handles both private and group messages with media/location support
model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String?   // For 1-1 chats
  groupId     String?   // For group chats
  conversationId String?
  type        MessageType @default(TEXT)
  content     String?
  mediaUrl    String?   // S3 / OCI media URL
  location    Json?     // { latitude, longitude }
  systemType  SystemMessageType?
  metadata    Json?
  actorId     String?
  targetUserId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  editedAt    DateTime? // When message was last edited
  deletedAt   DateTime?
  deletedBy   String?   // User ID who deleted the message

  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User?     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  group       Group?    @relation(fields: [groupId], references: [id])
  conversation DirectConversation? @relation("ConversationMessages", fields: [conversationId], references: [id])
  media       Media?    @relation("MessageMedia")
  receipts    MessageReceipt[]
  actor       User?     @relation("SystemActor", fields: [actorId], references: [id])
  targetUser  User?     @relation("SystemTarget", fields: [targetUserId], references: [id])

  @@map("messages")
}

model DirectConversation {
  id        String   @id @default(uuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userA User @relation("DirectConversationUserA", fields: [userAId], references: [id])
  userB User @relation("DirectConversationUserB", fields: [userBId], references: [id])
  messages Message[] @relation("ConversationMessages")

  @@unique([userAId, userBId])
  @@map("direct_conversations")
}

// Group Model - Stores group-level metadata and relationships
model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  avatarUrl   String?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  members     GroupMember[]
  messages    Message[]
  invitations GroupInvitation[]

  @@map("groups")
}

// GroupMember Model - Links users to groups with role-based access
model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  group     Group   @relation(fields: [groupId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([groupId, userId]) // Prevent duplicate memberships
  @@map("group_members")
}

model GroupInvitation {
  id           String   @id @default(uuid())
  groupId      String
  inviterId    String
  token        String   @unique
  inviteeEmail String?
  expiresAt    DateTime
  acceptedAt   DateTime?
  createdAt    DateTime @default(now())

  group   Group @relation(fields: [groupId], references: [id])
  inviter User  @relation("GroupInvitationInviter", fields: [inviterId], references: [id])

  @@map("group_invitations")
}

// VerificationToken Model - Stores email verification and password reset tokens
model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  type      TokenType
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id])

  @@map("verification_tokens")
}

// DeviceSession Model - Tracks active user devices for session control
model DeviceSession {
  id        String   @id @default(uuid())
  userId    String
  deviceId  String
  platform  String
  lastActive DateTime @default(now())
  token     String?

  user      User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("device_sessions")
}

model PushToken {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  deviceId   String?
  platform   String?
  appVersion String?
  buildNumber String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  revokedAt  DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("push_tokens")
}

// Media Model (Optional) - Track uploaded files separately for analytics
model Media {
  id         String   @id @default(uuid())
  uploaderId String
  url        String
  type       String
  size       Int?
  messageId  String?  @unique

  uploader   User     @relation("MediaUploader", fields: [uploaderId], references: [id])
  message    Message? @relation("MessageMedia", fields: [messageId], references: [id])

  createdAt  DateTime @default(now())

  @@map("media")
}

model MessageReceipt {
  id        String                @id @default(uuid())
  messageId String
  userId    String
  status    MessageReceiptStatus  @default(DELIVERED)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
  @@map("message_receipts")
}

// Enums for type safety
enum MessageType {
  TEXT
  IMAGE
  VIDEO
  LOCATION
  FILE
}

enum MessageReceiptStatus {
  DELIVERED
  READ
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum SystemMessageType {
  GROUP_CREATED
  MEMBER_ADDED
  MEMBER_REMOVED
  MEMBER_LEFT
  MEMBER_PROMOTED
  MEMBER_DEMOTED
  GROUP_RENAMED
  GROUP_DESCRIPTION_UPDATED
  GROUP_AVATAR_UPDATED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
